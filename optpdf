#!/bin/bash
#
# optpdf file.pdf
#   This script will attempt to optimize the given pdf
# https://tex.stackexchange.com/questions/18987

IFS=$'\n'
RNDSFX=""

# Default values
pdf_files=()

# Usage function
usage() {
    script_name=$(basename "$0")
    echo "Usage: $script_name [-t] [-r] <pdf1> <pdf2> ... <folder1> <folder2> ..."
    echo "Optimize the given PDFs"
    echo
    echo "Options:"
    echo "  -t, --temp     Add a random suffix to the filename"
    echo "  -r, --recursive  Search for PDFs recursively in specified folders"
    echo "  <pdf1> <pdf2> ...  Specify one or more PDFs"
    echo "  <folder1> <folder2> ...  Specify folders to search for PDFs (with -r)"
    exit 1
}

cleanup() {
    local optfile="$1"
    local dirpath="$2"

    # Remove file if it exists
    [ -f "${optfile}" ] && rm -f "${optfile}"

    # Remove directory if it exists and is empty
    if [ -d "${dirpath}" ]; then
        rmdir "${dirpath}" > /dev/null 2>&1
    fi
}

# Enable case-insensitive matching for 'case'
shopt -s nocasematch

# Initialize variables
RNDSFX=""
recursive=false
pdf_files=()

# Parse command-line options
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -t|--temp)  # Add random suffix
            RNDSFX="_opt$$"
            shift
            ;;
        -r|--recursive)  # Enable recursive search
            recursive=true
            shift
            ;;
        *.pdf)  # If argument is a PDF file, add to array
            pdf_files+=("$1")
            shift
            ;;
        -*)  # Unknown option
            echo "Unknown option: $1"
            usage
            ;;
        *)  # Assume it's a directory if recursive is enabled
            if [ "$recursive" = true ] && [ -d "$1" ]; then
                pdf_files+=($(find "$1" -type f -iname "*.pdf"))
            else
                echo "Skipping unrecognized input: $1"
            fi
            shift
            ;;
    esac
done

# Disable case-insensitive matching after use
shopt -u nocasematch

# Check if mandatory argument is provided
if [[ ${#pdf_files[@]} -eq 0 ]]; then
    usage
fi

current_dir_name=$(basename "$PWD")

echo "Selected File(s) ..."
for ((i=0; i<${#pdf_files[@]}; i++)); do
    printf  "  %2d) %s\n" $((i+1)) "${pdf_files[i]}"
done

mkdir -p "/tmp/${current_dir_name}"

rm /tmp/gs_error.log  > /dev/null 2>&1

# Rest of the script...
# for i in `ls ${pdf_files[@]}`; do
for ((i=0; i<${#pdf_files[@]}; i++)); do
    file="${pdf_files[i]}"
    echo -e "$((i+1))) Optimizing \e[35m$file\e[0m ..."
    filebase="$(basename "$file" .pdf)"
    # Get the full directory path without the file name
    dirpath=$(dirname "$file")
    mkdir -p "/tmp/${current_dir_name}/${dirpath}"
    optfile=$(realpath "/tmp/${current_dir_name}/${dirpath}/${filebase}${RNDSFX}.pdf")
    gsoptfile=$(echo "$optfile" | sed 's/%/%%/g')
    
    output=$(gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH \
            -sOutputFile="${gsoptfile}" "${file}" 2>&1)  # Capture both stdout and stderr
    if [ -n "$output" ]; then
        echo "$output"
    fi
    if echo "$output" | grep -Eiq "Error|Warning|can\'t"; then
        echo "❌ Ghostscript encountered an error! ❌"
        echo "${file}" >> /tmp/gs_error.log  
        echo "$output" >> /tmp/gs_error.log  # Save the error log for debugging
        printf '%80s\n' | tr ' ' '=' >> /tmp/gs_error.log
        cleanup "${optfile}" "/tmp/${current_dir_name}/${dirpath}"  # Cleanup if needed
        continue
    fi
    if [ $? == '0' ]; then
        optsize=$(stat -c "%s" -- "${optfile}")
        orgsize=$(stat -c "%s" -- "${file}")
        if [ "${optsize}" -eq 0 ]; then
            echo -e "╚══ No output!  Keeping original."
            cleanup "${optfile}" "/tmp/${current_dir_name}/${dirpath}"
            continue
        fi
        if [ ${optsize} -ge ${orgsize} ]; then
            echo -e "╚══ \e[;30;47mDidn't make it smaller! Keeping original.\e[0m"
            cleanup "${optfile}" "/tmp/${current_dir_name}/${dirpath}"
            continue
        fi
        bytesSaved=$(expr $orgsize - $optsize)
        percent=$(expr $optsize '*' 100 / $orgsize)
        echo -e "╚══ Saving \e[32m$bytesSaved\e[0m bytes (\e[31m${percent}%\e[0m of the original one!)"
        # rm "${file}"
        # mv "${optfile}" "${file}"
    fi
    
done

rmdir "/tmp/${current_dir_name}" &> /dev/null
